= 開発
== 環境構築
  $ sudo gem install nanoc rack mime-types
  $ cd rubysappororecipe.com
  $ nanoc aco (auto-compileの意味)
  してから、http://localhost:3000/ にアクセスしましょう。

== nanocの基本

nanocは基本的に以下の2つのソースをcontent,assets,layoutsなどの
中に書いて、コンパイルすることでpublic以下に公開用の静的HTMLや画像を
書き出す、という使い方をします。
* ページの元になるソース(.html.erb なり textile なり markdown なり)
* ページのメタデータ(ソースにどんなフィルタ(erbの実行とかtextile,markdownのコンパイルとか)をかけるか
  とか、ページ内に埋め込むデータの定義とか(yaml形式)

このルールはHTMLだけではなく画像やCSSに対しても同様です。
画像に対して大きさを調節するフィルタをかけてから公開、とか。
定数を使って以下のようにCSSを定義して
  <% color = "#f00" >
  body {
    background-color: <%= color %>;
  }

  h1 {
    border-bottom: 3px solid <%= color %>;
  }
.yaml の中で filters に erb を指定して
erb のコンパイルをして公開したりとか。

== ページの追加方法

  $ nanoc create_page hoge

というコマンドがあるらしいが、別に大したことしてくれるわけじゃない。

== 画像などの置き方

assetsに.yamlとセットで入れるのが正しいやり方なのだと
思うが、フィルタなどが必要ないものについては、
直接publicの下に入れちゃったりしてる。
(ソースコードの管理的に混乱する(どこのファイルをいじって
良いかよくわかあなくなる)のであんまり良くないんだが、
assetsの下に置くのも面倒だなー、と。)

== 変数とかヘルパとかオリジナルな関数とか

nanocでは予め利用できる変数というのがいくつかあるので、
<%=link_to ...%>などでこれを利用してリンクを張ることができる。
  cf) http://nanoc.stoneship.org/help/manual/chapter-2/#pages-variables

またデフォルトで用意されているヘルパというのもいくつかあり、
lib/default.rb の中から include することで利用できる。
  cf) http://nanoc.stoneship.org/help/manual/chapter-2/#helpers

この他にlib/default.rbの中で自分で関数を定義して利用できる。
  def asset(asset_id)
    @assets.find { |asset| asset.asset_id == asset_id }
  end
とか(これはどっかに転がってたのをパクってきただけ)。


= デプロイ
* 準備

/home/rsrecipe/.ssh/authorized_keys に自分の鍵を追加します。


* deploy

1. public 以下にwebサイトの内容を配置して、
2. rake deploy:from_local でデプロイされます。

gitリポジトリの内容ではなく、手元の内容がデプロイされますのでご注意ください。
(未pushの変更がデプロイされるということです。だからfrom_local)
